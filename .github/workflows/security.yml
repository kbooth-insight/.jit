name: Workflows generated by the MVS plan
on:
  workflow_dispatch:
    inputs:
       client_payload:
          description: The Client payload
          required: true
jobs:
  static-code-analysis-python:
    if: contains( fromJSON(github.event.inputs.client_payload).payload.control_ids, '1453f8c6-88a5-42ea-a8d9-714c82da0b62') || fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-python'
    runs-on: ubuntu-latest
    steps:
    - name: python-code-scanning
      uses: jitsecurity-controls/jit-github-action@v1.6
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-bandit-slim:latest
        security_control_args: -r /code -f json -q -lll -iii
        security_control_output_file: /tmp/report.json
        dispatch_type: workflow

  static-code-analysis-js:
    if: contains( fromJSON(github.event.inputs.client_payload).payload.control_ids, 'a2673eff-ede1-43ca-ae03-aca62ea3f231') || fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-js'
    runs-on: ubuntu-latest
    steps:
    - name: semgrep-code-scanning
      uses: jitsecurity-controls/jit-github-action@v1.6
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-semgrep-alpine:latest
        security_control_args: --json --config=/semgrep-config.yml --metrics=off --severity=ERROR /code
        
        dispatch_type: workflow

  static-code-analysis-go:
    if: contains( fromJSON(github.event.inputs.client_payload).payload.control_ids, 'b43c396a-201e-4838-a290-801e02a3541d') || fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-go'
    runs-on: ubuntu-latest
    steps:
    - name: golang-code-scanning
      uses: jitsecurity-controls/jit-github-action@v1.6
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-gosec-alpine:latest
        security_control_args: -fmt=json -severity=high /code/...
        
        dispatch_type: workflow

  docker-scan:
    if: contains( fromJSON(github.event.inputs.client_payload).payload.control_ids, '4f090709-fac0-4e99-ad69-ef283e811c03') || fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'docker-scan'
    runs-on: ubuntu-latest
    steps:
    - name: trivy-dockerfile-scanner
      uses: jitsecurity-controls/jit-github-action@v1.6
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-trivy-alpine:latest
        security_control_args: --quiet config --severity HIGH,CRITICAL -f json --ignorefile /opt/.trivyignore /code
        
        dispatch_type: workflow

  software-component-analysis-python:
    if: contains( fromJSON(github.event.inputs.client_payload).payload.control_ids, 'fa8da1d5-0dbd-4dd1-9d2d-77b25d02ea82') || fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'software-component-analysis-python'
    runs-on: ubuntu-latest
    steps:
    - name: dependency-check-python
      uses: jitsecurity-controls/jit-github-action@v1.6
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-dependency-check-alpine:latest
        security_control_args: --scan /code --enableExperimental --disableJar --disableRubygems --disableBundleAudit --disableCocoapodsAnalyzer --disableSwiftPackageManagerAnalyzer --disableSwiftPackageResolvedAnalyzer --disableAutoconf --disableCmake --disableComposer --disableCpan --disableNuspec --disableNugetconf --disableAssembly --disableGolangDep --disableGolangMod --disableNodeJS --disableYarnAudit --disableNodeAudit --format JSON --noupdate --out /tmp/report.json --log /code/error.txt
        security_control_output_file: /tmp/report.json
        dispatch_type: workflow

  software-component-analysis-js:
    if: contains( fromJSON(github.event.inputs.client_payload).payload.control_ids, '66be87c7-20ab-4f6d-adb5-db14aa44c30d') || fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'software-component-analysis-js'
    runs-on: ubuntu-latest
    steps:
    - name: dependency-check-node
      uses: jitsecurity-controls/jit-github-action@v1.6
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-npm-audit-slim:latest
        security_control_args: audit --json --production
        
        dispatch_type: workflow

  software-component-analysis-go:
    if: contains( fromJSON(github.event.inputs.client_payload).payload.control_ids, '0d967719-438e-4299-9ebb-f46dac4088f9') || fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'software-component-analysis-go'
    runs-on: ubuntu-latest
    steps:
    - name: nancy
      uses: jitsecurity-controls/jit-github-action@v1.6
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-nancy-alpine:latest
        security_control_args: 
        security_control_output_file: output.json
        dispatch_type: workflow

  iac-misconfig-detection:
    if: contains( fromJSON(github.event.inputs.client_payload).payload.control_ids, 'd75b6a09-a4cd-4944-903e-7cf78ae7065b') || fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'iac-misconfig-detection'
    runs-on: ubuntu-latest
    steps:
    - name: cloud-infrastructure-misconfiguration
      uses: jitsecurity-controls/jit-github-action@v1.6
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-kics-alpine:latest
        security_control_args: scan -p /code -o /code/jit-report -f json --exclude-severities INFO,MEDIUM,LOW --disable-secrets
        security_control_output_file: /code/jit-report/results.json
        dispatch_type: workflow

  remediation-pr:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'remediation-pr'
    runs-on: ubuntu-latest
    steps:
    - name: remediation-pr
      uses: jitsecurity-controls/jit-github-action@v1.6
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/open-remediation-pr-alpine:latest
        security_control_args: --github-token ${{fromJSON(github.event.inputs.client_payload).payload.github_token}} --fix-pr-config ${{fromJSON(github.event.inputs.client_payload).payload.fix_pr_config}}
        security_control_output_file: /tmp/report.json
        dispatch_type: workflow

  secret-detection:
    if: contains( fromJSON(github.event.inputs.client_payload).payload.control_ids, '8ff8b60d-88ad-4bff-b3ae-7fcd6546f8a1') || fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'secret-detection'
    runs-on: ubuntu-latest
    steps:
    - name: secrets-detection
      uses: jitsecurity-controls/jit-github-action@v1.6
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-gitleaks-alpine:latest
        security_control_args: detect --config /config/gitleaks.toml --source /code -v --report-format json --report-path /tmp/report.json --redact --no-git --exit-code 0
        security_control_output_file: /tmp/report.json
        dispatch_type: workflow
